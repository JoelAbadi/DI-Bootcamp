URL: https://github.com/JoelAbadi/DI-Bootcamp/blob/main/W1/D5/Daily_Challenge.py
suggestions for improvement:
- Challenge 1: The solution correctly sorts and prints the comma-separated words. However,  there's no error handling for unexpected input (e.g., no commas, extra spaces).
- Challenge 2: The `longest_word` function doesn't handle punctuation correctly as required. It splits words based on spaces, ignoring punctuation within a word.  The chapter explicitly states that punctuation should be considered part of the word. 
- Both Challenges: Add docstrings to functions to improve readability and explain functionality.
- Challenge 2: Consider using a more concise approach to find the longest word (e.g., using `max` with a key function).
Brief justification:
- correctness: Challenge 1 largely fulfills the requirement of sorting comma-separated words; however, it lacks robustness. Challenge 2's correctness is significantly reduced because it fails to address the requirement of including punctuation within words when determining word length, as explicitly stated in the chapter content.  The splitting on spaces leads to incorrect results.
- readability: The code is reasonably readable. However, adding docstrings and more descriptive variable names (e.g., instead of `longest`, use `longest_word` etc.) would enhance readability. The comments in Challenge 2 are slightly redundant, as the code itself is relatively clear.
- performance: The performance of both solutions is quite good for the given task. The sorting in Challenge 1 is efficient (O(n log n)), and the iteration in Challenge 2 is linear (O(n)). There are no obvious performance bottlenecks.
- security: There are no security concerns in this code. The code only interacts with user input and performs string manipulations; there's no interaction with external systems or sensitive data.

