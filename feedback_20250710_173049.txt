URL: https://github.com/JoelAbadi/DI-Bootcamp/blob/main/W7_D5_XP.ipynb
suggestions for improvement:
- **Exercise 1:** The code correctly parses the provided HTML and extracts the title, paragraphs, and links. However, it doesn't fetch the HTML content using `urlopen()`, as specified in the instructions.  It uses a hardcoded HTML string.  The exercise should be updated to use `urlopen()` to fetch HTML from a real URL. Consider adding error handling (e.g., try-except block) in case the URL is not accessible or the HTML is malformed.
- **Exercise 5:** The code attempts to scrape US-CERT security alerts. However, it hardcodes the year 2025 into the URL. The prompt requests the number of alerts for the *current* year, making the code partially incorrect.  It should dynamically determine the current year and construct the URL accordingly.  Furthermore, the website's structure might change, so a more robust way of extracting the number of alerts (not just relying on `len(alerts)`) would improve its correctness and resilience. Add error handling.
- **Exercise 6:**  The code fetches the IMDB page, but it doesn't parse and extract the movie details (name, year, summary) as instructed.  The provided code only fetches the HTML; it needs to be completed with BeautifulSoup to parse the data and extract the relevant information.  It also lacks error handling and uses a hardcoded user-agent which can lead to website blocking. The user agent should be made more robust to better handle website changes.
- **General Improvements:** Add more comprehensive error handling (using `try...except` blocks) to handle potential exceptions like network errors, invalid URLs, and HTML parsing errors.  Document the code clearly with comments explaining each step and the purpose of different code sections.
- Use more descriptive variable names (e.g., instead of `l` for links, use `links`).
Brief justification:
- correctness: Exercise 1 is partially correct because it only addresses the parsing part, not the fetching using `urlopen()`. Exercise 5 is partially correct as it fetches data, but it hardcodes the year, and its alert extraction is brittle. Exercise 6 is incomplete, only fetching HTML.  Other exercises are not provided, so their correctness cannot be evaluated.
- readability: The code is generally well-structured and easy to follow for the tasks it performs.  However, more comments and better variable names would enhance readability. 
- performance: The performance is acceptable for the given task.  However, fetching and parsing real websites would introduce performance considerations that need to be addressed (e.g., optimizing BeautifulSoup parsing). The current performance score reflects the limited scope of the provided code.
- security: The code lacks crucial security features.  The IMDB scraper uses a hardcoded user agent which makes it more likely to be blocked.  Fetching data from websites always carries security risks.  Respecting `robots.txt` rules and adding delays between requests are important security best practices that are missing from the code.  Error handling would also mitigate some security risks.

